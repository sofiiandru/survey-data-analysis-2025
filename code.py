import pandas as pd
import streamlit as st
import plotly.express as px

# –ó–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é
PAGE_CONFIG = {
    "layout": "wide",
    "page_title": "–ê–Ω–∞–ª—ñ–∑ —ñ–≥—Ä–æ–≤–æ–≥–æ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è",
    "page_icon": "üéÆ"
}
st.set_page_config(**PAGE_CONFIG)

CSS = """
<style>
    .stApp { background-color: #f0f2f6; color: #333333; }
    .stMarkdown h1 { color: #1e3a8a; text-align: center; margin-bottom: 30px; padding-top: 20px; }
    .big-font { font-size: 30px !important; font-weight: bold; color: #1e3a8a; margin: 20px 0 15px; text-align: center; }
    .card h2 { color: #333333; margin-top: 0; }
    .sidebar { background-color: #e0e0e0; padding: 20px; border-right: 1px solid #cccccc; }
    .sidebar h2 { color: #1e3a8a; margin-bottom: 15px; }
    .stMultiSelect label { font-weight: bold; color: #555555; }
</style>
"""
st.markdown(CSS, unsafe_allow_html=True)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
survey_df = pd.read_csv("survey_data_updated.csv", sep=';')
impact_df = pd.read_csv("impact_data_updated.csv")

#–û–±'—î–¥–Ω–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
merge_key_col = 'ID'
if merge_key_col in survey_df.columns and merge_key_col in impact_df.columns:
    survey_df[merge_key_col] = survey_df[merge_key_col].astype(str)
    impact_df[merge_key_col] = impact_df[merge_key_col].astype(str)
    merged_df = pd.merge(survey_df, impact_df, on=merge_key_col, how='outer')
else:
    st.error(f"–ü–æ–º–∏–ª–∫–∞: –°—Ç–æ–≤–ø–µ—Ü—å '{merge_key_col}' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –≤ –æ–¥–Ω–æ–º—É –∞–±–æ –æ–±–æ—Ö DataFrame. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤–∏ —Å—Ç–æ–≤–ø—Ü—ñ–≤.")
    st.stop()

#–§—ñ–ª—å—Ç—Ä –∑–∞ –≤—ñ–∫–æ–º 
st.sidebar.header("–§—ñ–ª—å—Ç—Ä–∏")
if '–í—ñ–∫' in survey_df.columns:
    survey_df['–í—ñ–∫_cleaned'] = pd.to_numeric(survey_df['–í—ñ–∫'], errors='coerce')
    cleaned_ages = survey_df['–í—ñ–∫_cleaned'].dropna().unique().astype(int)
    cleaned_ages_sorted = sorted(cleaned_ages)

    age_label_map = {age: f"{age} —Ä." for age in cleaned_ages_sorted}
    age_labels = [age_label_map[age] for age in cleaned_ages_sorted]

    # –ü–µ—Ä–µ–º–∏–∫–∞—á "–û–±—Ä–∞—Ç–∏ –≤—Å—ñ"
    select_all_ages = st.sidebar.checkbox("–û–±—Ä–∞—Ç–∏ –≤—Å—ñ –≤—ñ–∫–∏", value=True)

    selected_labels = st.sidebar.multiselect(
        "–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ –≤—ñ–∫–æ–º:",
        options=age_labels,
        default=age_labels if select_all_ages else []
    )

    # –í–∏—Ç—è–≥ —á–∏—Å–µ–ª
    age_filter = [age for age, label in age_label_map.items() if label in selected_labels]
else:
    st.sidebar.warning("–°—Ç–æ–≤–ø–µ—Ü—å '–í—ñ–∫' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É survey_df. –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ –≤—ñ–∫–æ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    age_filter = None
# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
if age_filter is not None and '–í—ñ–∫_cleaned' in survey_df.columns:
    filtered_survey_df = survey_df[survey_df['–í—ñ–∫_cleaned'].isin(age_filter)].copy()
    filtered_merged_df = merged_df[merged_df[merge_key_col].isin(filtered_survey_df[merge_key_col])].copy()
else:
    filtered_survey_df = survey_df.copy()
    filtered_merged_df = merged_df.copy()

if filtered_survey_df.empty:
    st.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∏–±—Ä–∞–Ω–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó.")
    st.stop()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä—É–≥–æ–≤–∏—Ö –¥—ñ–∞–≥—Ä–∞–º
def create_pie_chart(data, names_col, values_col, title, pull_values=None):
    fig = px.pie(data, names=names_col, values=values_col, title=title,
                color=names_col, color_discrete_sequence=px.colors.qualitative.T10,
                template='plotly_white', hole=0.2)
    fig.update_traces(textposition='outside', textinfo='percent+label', textfont_size=15,
                        textfont_color='gray', marker=dict(line=dict(color='#000000', width=1)),
                      pull=pull_values if pull_values else [0] * len(data))
    fig.update_layout(showlegend=True,
                        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
                        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
    return fig

tab1, tab2 = st.tabs(["–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —ñ–≥–æ—Ä", "–í–ø–ª–∏–≤ —ñ–≥–æ—Ä"])

# –í–∫–ª–∞–¥–∫–∞ 1: –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —ñ–≥–æ—Ä
with tab1:
    st.markdown("<p class='big-font'>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ —ñ–≥–æ—Ä —Ç–∞ –∂–∞–Ω—Ä—ñ–≤</p>", unsafe_allow_html=True)
#–ü–µ—Ä—à–∏–π —Ä—è–¥ 
    col1, col2, col3 = st.columns(3)
    # 1. –ß–∏ –≥—Ä–∞—î —É –≤—ñ–¥–µ–æ—ñ–≥—Ä–∏
    if '–ß–∏ –≥—Ä–∞—î —É –≤—ñ–¥–µ–æ—ñ–≥—Ä–∏' in filtered_survey_df:
        play_counts = filtered_survey_df['–ß–∏ –≥—Ä–∞—î —É –≤—ñ–¥–µ–æ—ñ–≥—Ä–∏'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        play_counts.columns = ['–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        pull_play = [0.05 if label == '–¢–∞–∫' else 0 for label in play_counts['–í—ñ–¥–ø–æ–≤—ñ–¥—å']]
        with col1:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.plotly_chart(create_pie_chart(play_counts, '–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', "–°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—ñ–≤ –¥–æ –Ω–µ –≥—Ä–∞–≤—Ü—ñ–≤", pull_play), use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)

    # 2. –¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤
    if '–ñ–∞–Ω—Ä' in filtered_survey_df:
        genre_counts = filtered_survey_df[filtered_survey_df['–ñ–∞–Ω—Ä'] != '-']['–ñ–∞–Ω—Ä'].value_counts().head(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        genre_counts.columns = ['–ñ–∞–Ω—Ä', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        with col2:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            if not genre_counts.empty:
                fig_genre_bar = px.bar(genre_counts, x='–ñ–∞–Ω—Ä', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', color='–ñ–∞–Ω—Ä',
                                        template='plotly_white', color_discrete_sequence=px.colors.qualitative.T10,
                                        title="–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤", labels={'–ö—ñ–ª—å–∫—ñ—Å—Ç—å': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'})
                fig_genre_bar.update_layout(xaxis_title="–ñ–∞–Ω—Ä", yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                                            plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                st.plotly_chart(fig_genre_bar, use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)
    # 3. –¢–æ–ø-5 —ñ–≥–æ—Ä
    if '–£–ª—é–±–ª–µ–Ω–∞ –≥—Ä–∞' in filtered_survey_df:
        games_series = filtered_survey_df[filtered_survey_df['–£–ª—é–±–ª–µ–Ω–∞ –≥—Ä–∞'] != '-']['–£–ª—é–±–ª–µ–Ω–∞ –≥—Ä–∞'].str.split(',').explode().str.strip().str.lower()
        game_counts = games_series.value_counts().head(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        game_counts.columns = ['–ì—Ä–∞', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        with col3:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            fig_game_bar = px.bar(game_counts, x='–ì—Ä–∞', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', color='–ì—Ä–∞',
                                    template='plotly_white', color_discrete_sequence=px.colors.qualitative.T10,
                                    title="–¢–æ–ø-5 —ñ–≥–æ—Ä", labels={'–ö—ñ–ª—å–∫—ñ—Å—Ç—å': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å'})
            fig_game_bar.update_layout(xaxis_title="–ì—Ä–∞", yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å",
                                        plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig_game_bar, use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)

#–î—Ä—É–≥–∏–π —Ä—è–¥
    col1, col2, col3 = st.columns(3)
    # 4. –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏
    if '–í–∏—Ç—Ä–∞—Ç–∞ –≥—Ä–æ—à–µ–π' in filtered_survey_df:
        spending_counts = filtered_survey_df['–í–∏—Ç—Ä–∞—Ç–∞ –≥—Ä–æ—à–µ–π'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        spending_counts.columns = ['–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        pull_spending = [0.05 if label == '–¢–∞–∫' else 0 for label in spending_counts['–í—ñ–¥–ø–æ–≤—ñ–¥—å']]
        with col1:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.plotly_chart(create_pie_chart(spending_counts, '–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', "–í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ —ñ–≥—Ä–∏", pull_spending), use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)
    # 5. –¢–æ–ø –∂–∞–Ω—Ä—ñ–≤ –∑–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–º –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤
    if '–ñ–∞–Ω—Ä' in filtered_merged_df and '–í–∏—Ç—Ä–∞—Ç–∞ –≥—Ä–æ—à–µ–π' in filtered_merged_df:
        genre_donations = filtered_merged_df[filtered_merged_df['–í–∏—Ç—Ä–∞—Ç–∞ –≥—Ä–æ—à–µ–π'] == '–¢–∞–∫'].assign(–ñ–∞–Ω—Ä=filtered_merged_df['–ñ–∞–Ω—Ä'].str.split(',')).explode('–ñ–∞–Ω—Ä')
        genre_donations['–ñ–∞–Ω—Ä'] = genre_donations['–ñ–∞–Ω—Ä'].str.strip()
        genre_donations = genre_donations[genre_donations['–ñ–∞–Ω—Ä'] != '-']

        genre_totals = filtered_merged_df.assign(–ñ–∞–Ω—Ä=filtered_merged_df['–ñ–∞–Ω—Ä'].str.split(',')).explode('–ñ–∞–Ω—Ä')
        genre_totals['–ñ–∞–Ω—Ä'] = genre_totals['–ñ–∞–Ω—Ä'].str.strip()
        genre_totals = genre_totals[genre_totals['–ñ–∞–Ω—Ä'] != '-']

        donating_counts = genre_donations['–ñ–∞–Ω—Ä'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤')
        donating_counts.columns = ['–ñ–∞–Ω—Ä', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤']
        total_counts = genre_totals['–ñ–∞–Ω—Ä'].value_counts().reset_index(name='–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤')
        total_counts.columns = ['–ñ–∞–Ω—Ä', '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤']

        genre_rates = pd.merge(donating_counts, total_counts, on='–ñ–∞–Ω—Ä', how='left').fillna(0)
        genre_rates['–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤'] = (genre_rates['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤'] / genre_rates['–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤']) * 100
        top_genres_percent = genre_rates.sort_values(by='–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤', ascending=False).head(5)

        with col2:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            if not top_genres_percent.empty:
                fig_genre_donations_bar = px.bar(top_genres_percent, x='–ñ–∞–Ω—Ä', y='–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤', color='–ñ–∞–Ω—Ä',
                                                template='plotly_white', color_discrete_sequence=px.colors.qualitative.T10,
                                                labels={'–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤': '–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤ (%)', '–ñ–∞–Ω—Ä': '–ñ–∞–Ω—Ä'})
                fig_genre_donations_bar.update_layout(title="–¢–æ–ø –∂–∞–Ω—Ä—ñ–≤ –∑–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–º –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤",
                                                    xaxis_title="–ñ–∞–Ω—Ä", yaxis_title="–í—ñ–¥—Å–æ—Ç–æ–∫ –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤ (%)",
                                                    plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                st.plotly_chart(fig_genre_donations_bar, use_container_width=True)
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–ø –∂–∞–Ω—Ä—ñ–≤ –∑–∞ –≤—ñ–¥—Å–æ—Ç–∫–æ–º –¥–æ–Ω–∞—Ç–µ—Ä—ñ–≤.")
            st.markdown("</div>", unsafe_allow_html=True)
    # 6. –†–æ–∑–ø–æ–¥—ñ–ª —á–∞—Å—É –≥—Ä–∏
    if '–ß–∞—Å' in filtered_survey_df:
        time_mapping = {'–º–µ–Ω—à–µ 1 –≥–æ–¥–∏–Ω–∏': 0.5, '–±–ª–∏–∑—å–∫–æ 1 –≥–æ–¥–∏–Ω–∏': 1, '–±–ª–∏–∑—å–∫–æ 2 –≥–æ–¥–∏–Ω': 2,
                        '–±–ª–∏–∑—å–∫–æ 3 –≥–æ–¥–∏–Ω': 3, '–±–ª–∏–∑—å–∫–æ 4 –≥–æ–¥–∏–Ω': 4, '4 –≥–æ–¥–∏–Ω–∏ —ñ –±—ñ–ª—å—à–µ': 5}
        time_counts = filtered_survey_df['–ß–∞—Å'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        time_counts.columns = ['–ß–∞—Å_—Ç–µ–∫—Å—Ç', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        time_counts['–ß–∞—Å_—á–∏—Å–ª–æ'] = time_counts['–ß–∞—Å_—Ç–µ–∫—Å—Ç'].map(time_mapping)
        time_counts = time_counts.sort_values(by='–ß–∞—Å_—á–∏—Å–ª–æ')
        with col3:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            fig_playtime_area = px.area(time_counts, x='–ß–∞—Å_—á–∏—Å–ª–æ', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                        title="–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —á–∞—Å—É, –ø—Ä–æ–≤–µ–¥–µ–Ω–æ–≥–æ –∑–∞ —ñ–≥—Ä–∞–º–∏",
                                        template='plotly_white',
                                        color_discrete_sequence=px.colors.qualitative.T10,
                                        hover_data={'–ß–∞—Å_—á–∏—Å–ª–æ': False, '–ß–∞—Å_—Ç–µ–∫—Å—Ç': True, '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': True})
            fig_playtime_area.update_layout(xaxis=dict(tickvals=list(time_mapping.values()),
                                                        ticktext=list(time_mapping.values()),
                                                        title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≥—Ä–∏ –∑–∞ –¥–µ–Ω—å (–≥–æ–¥–∏–Ω–∏)"),
                                            yaxis_title="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤",
                                            plot_bgcolor='rgba(0,0,0,0)',
                                            paper_bgcolor='rgba(0,0,0,0)')
            fig_playtime_area.update_traces(hovertemplate="–ß–∞—Å: %{customdata[0]}<br>–ö—ñ–ª—å–∫—ñ—Å—Ç—å: %{y}<extra></extra>")
            st.plotly_chart(fig_playtime_area, use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)

#–¢—Ä–µ—Ç—ñ–π —Ä—è–¥
    col1, col2, col3 = st.columns(3)
    # 7. –ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å –¥–µ–≤–∞–π—Å—ñ–≤
    if '–î–µ–≤–∞–π—Å' in filtered_survey_df:
        filtered_survey_df['–î–µ–≤–∞–π—Å'] = filtered_survey_df['–î–µ–≤–∞–π—Å'].astype(str)
        platform_series = filtered_survey_df[
            (filtered_survey_df['–î–µ–≤–∞–π—Å'] != '-') &
            (filtered_survey_df['–î–µ–≤–∞–π—Å'].str.lower() != 'nan')
        ]['–î–µ–≤–∞–π—Å'].str.split(',').explode().str.strip().str.lower()
        platform_counts = platform_series.value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        platform_counts.columns = ['–î–µ–≤–∞–π—Å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        with col1:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            if not platform_counts.empty:
                fig_devices_pie = px.pie(platform_counts, names='–î–µ–≤–∞–π—Å', values='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                        title="–ü–æ–ø—É–ª—è—Ä–Ω—ñ—Å—Ç—å —ñ–≥—Ä–æ–≤–∏—Ö –¥–µ–≤–∞–π—Å—ñ–≤", template='plotly_white',
                                        color='–î–µ–≤–∞–π—Å', color_discrete_sequence=px.colors.qualitative.T10,
                                        hole=0.2, height=400)
                fig_devices_pie.update_traces(textposition='outside', textinfo='percent+label',
                                            textfont_size=12, textfont_color='gray',
                                            marker=dict(line=dict(color='#000000', width=1)),
                                             pull=[0.03] * len(platform_counts))
                fig_devices_pie.update_layout(showlegend=True,
                                            legend=dict(orientation="v", yanchor="top", y=1, xanchor="left", x=1,
                                                        font=dict(size=11, color="gray")),
                                            margin=dict(t=50, b=0, l=0, r=80),
                                            plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
                st.plotly_chart(fig_devices_pie, use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)
    # 8. –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –¥–µ–≤–∞–π—Å—ñ–≤ –∑–∞ –∂–∞–Ω—Ä–∞–º–∏ (%)
    if '–î–µ–≤–∞–π—Å' in filtered_survey_df and '–ñ–∞–Ω—Ä' in filtered_survey_df:
        filtered_survey_df['–î–µ–≤–∞–π—Å'] = filtered_survey_df['–î–µ–≤–∞–π—Å'].astype(str)
        device_genre_df = filtered_survey_df[
            (filtered_survey_df['–î–µ–≤–∞–π—Å'].notna()) &
            (filtered_survey_df['–î–µ–≤–∞–π—Å'].str.lower() != '—ñ–Ω—à–µ') &
            (filtered_survey_df['–î–µ–≤–∞–π—Å'] != '-') &
            (filtered_survey_df['–î–µ–≤–∞–π—Å'].str.lower() != 'nan') &
            (filtered_survey_df['–ñ–∞–Ω—Ä'].notna())
        ].copy()
        device_genre_df['–î–µ–≤–∞–π—Å'] = device_genre_df['–î–µ–≤–∞–π—Å'].str.lower().str.split(',').apply(
            lambda lst: [d.strip() for d in lst])
        device_genre_df['–ñ–∞–Ω—Ä'] = device_genre_df['–ñ–∞–Ω—Ä'].str.split(',').apply(
            lambda lst: [g.strip() for g in lst])
        exploded_device_genre_df = device_genre_df.explode('–î–µ–≤–∞–π—Å').explode('–ñ–∞–Ω—Ä')
        exploded_device_genre_df_filtered = exploded_device_genre_df[exploded_device_genre_df['–ñ–∞–Ω—Ä'] != '-'].copy()
        genre_device_counts = exploded_device_genre_df_filtered.groupby(['–ñ–∞–Ω—Ä', '–î–µ–≤–∞–π—Å']).size().reset_index(
            name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        genre_totals = genre_device_counts.groupby('–ñ–∞–Ω—Ä')['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'].transform('sum')
        genre_device_counts['–í—ñ–¥—Å–æ—Ç–æ–∫'] = (genre_device_counts['–ö—ñ–ª—å–∫—ñ—Å—Ç—å'] / genre_totals) * 100
        sorted_genres = sorted(genre_device_counts['–ñ–∞–Ω—Ä'].unique())
        min_x = -0.5  
        max_x = len(sorted_genres) - 0.5  
        min_y = 0
        max_y = genre_device_counts['–í—ñ–¥—Å–æ—Ç–æ–∫'].max() * 1.1  

        with col2:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            fig_devices_genre_line = px.line(genre_device_counts, x='–ñ–∞–Ω—Ä', y='–í—ñ–¥—Å–æ—Ç–æ–∫',
                                                color='–î–µ–≤–∞–π—Å', markers=True,
                                                title="–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—ñ –¥–µ–≤–∞–π—Å—ñ–≤ –∑–∞ –∂–∞–Ω—Ä–∞–º–∏ (%)",
                                                template='plotly_white',
                                                color_discrete_sequence=px.colors.qualitative.T10,
                                                category_orders={'–ñ–∞–Ω—Ä': sorted_genres},
                                                labels={'–í—ñ–¥—Å–æ—Ç–æ–∫': '–í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (%)', '–î–µ–≤–∞–π—Å': '–î–µ–≤–∞–π—Å'})
            fig_devices_genre_line.update_layout(xaxis_title='–ñ–∞–Ω—Ä', yaxis_title='–í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (%)',
                                                    legend_title_text='',
                                                    legend=dict(orientation="h", yanchor="bottom", y=0.9,
                                                                xanchor="center", x=0.5,
                                                                font=dict(size=11, color="gray")),
                                                    plot_bgcolor='rgba(0,0,0,0)',
                                                    paper_bgcolor='rgba(0,0,0,0)',
                                                    xaxis=dict(showgrid=True, gridcolor='lightgray', 
                                                            tickvals=sorted_genres,  
                                                            range=[min_x, max_x]),
                                                    yaxis=dict(showgrid=True, gridcolor='lightgray', range=[min_y, max_y]),
                                                    margin=dict(l=0, r=0, b=0, t=50) # –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ–ª—è
                                                    )
        
            for trace in fig_devices_genre_line.data:
                for x, y in zip(trace.x, trace.y):
                    fig_devices_genre_line.add_shape(
                        type="line",
                        x0=x, y0=0, x1=x, y1=y,
                        line=dict(color="gray", width=0.5, dash="dot"),
                        xref="x", yref="y"
                    )
            
            st.plotly_chart(fig_devices_genre_line, use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)
    # 9. –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≥—Ä–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º

    if '–ß–∞—Å' in filtered_survey_df and '–ñ–∞–Ω—Ä' in filtered_survey_df:
        time_mapping = {'–º–µ–Ω—à–µ 1 –≥–æ–¥–∏–Ω–∏': 0.5, '–±–ª–∏–∑—å–∫–æ 1 –≥–æ–¥–∏–Ω–∏': 1, '–±–ª–∏–∑—å–∫–æ 2 –≥–æ–¥–∏–Ω': 2,
                        '–±–ª–∏–∑—å–∫–æ 3 –≥–æ–¥–∏–Ω': 3, '–±–ª–∏–∑—å–∫–æ 4 –≥–æ–¥–∏–Ω': 4, '4 –≥–æ–¥–∏–Ω–∏ —ñ –±—ñ–ª—å—à–µ': 5}
        filtered_survey_df['–ß–∞—Å_—á–∏—Å–ª–æ'] = filtered_survey_df['–ß–∞—Å'].map(time_mapping)
        
        filtered_genre_df = filtered_survey_df[filtered_survey_df['–ñ–∞–Ω—Ä'] != '-'].copy()
        
        genre_counts = filtered_genre_df['–ñ–∞–Ω—Ä'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤')
        genre_counts.columns = ['–ñ–∞–Ω—Ä', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤']
        avg_time_by_genre = filtered_genre_df.groupby('–ñ–∞–Ω—Ä')['–ß–∞—Å_—á–∏—Å–ª–æ'].mean().sort_values().reset_index()
        avg_time_by_genre = pd.merge(avg_time_by_genre, genre_counts, on='–ñ–∞–Ω—Ä', how='left')
        with col3:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            if not avg_time_by_genre.empty:
                fig_time_genre_bar = px.bar(avg_time_by_genre, x='–ñ–∞–Ω—Ä', y='–ß–∞—Å_—á–∏—Å–ª–æ',
                                                title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≥—Ä–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º", template='plotly_white',
                                                color_discrete_sequence=['#1f77b4'] * len(avg_time_by_genre), 
                                                labels={'–ß–∞—Å_—á–∏—Å–ª–æ': '–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≥—Ä–∏ (–≥–æ–¥–∏–Ω–∏)', '–ñ–∞–Ω—Ä': '–ñ–∞–Ω—Ä'},
                                                hover_data={'–ñ–∞–Ω—Ä': True, '–ß–∞—Å_—á–∏—Å–ª–æ': ':.2f',
                                                            '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤': True})
                fig_time_genre_bar.update_layout(xaxis_title="–ñ–∞–Ω—Ä", yaxis_title="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≥—Ä–∏ (–≥–æ–¥–∏–Ω–∏)",
                                                    plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)',
                                                    showlegend=False)
                st.plotly_chart(fig_time_genre_bar, use_container_width=True)
            else:
                st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —á–∞—Å—É –≤—ñ–¥ –∂–∞–Ω—Ä—É.")
            st.markdown("</div>", unsafe_allow_html=True)
#–í–∫–ª–∞–¥–∫–∞ 2: –í–ø–ª–∏–≤ —ñ–≥–æ—Ä
with tab2:
    st.markdown("<p class='big-font'>–ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É –≤—ñ–¥–µ–æ—ñ–≥–æ—Ä</p>", unsafe_allow_html=True)
#–ü–µ—Ä—à–∏–π —Ä—è–¥ 
    col1, col2, col3 = st.columns(3)
    # 1. –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤ –≤—ñ–¥–µ–æ—ñ–≥–æ—Ä
    if '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤' in filtered_merged_df:
        positive_impact_counts = filtered_merged_df['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'].value_counts().reset_index(
            name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        positive_impact_counts.columns = ['–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        with col1:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.plotly_chart(create_pie_chart(positive_impact_counts, '–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                            "–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤ –≤—ñ–¥–µ–æ—ñ–≥–æ—Ä", pull_values=[0.1, 0, 0, 0]),
                            use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)

    # 2. –ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤ –≤—ñ–¥–µ–æ—ñ–≥–æ—Ä
    if '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤' in filtered_merged_df:
        negative_impact_counts = filtered_merged_df['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'].value_counts().reset_index(
            name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        negative_impact_counts.columns = ['–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
        with col2:
            st.markdown("<div class='card'>", unsafe_allow_html=True)
            st.plotly_chart(create_pie_chart(negative_impact_counts, '–í—ñ–¥–ø–æ–≤—ñ–¥—å', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                            "–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤ –≤—ñ–¥–µ–æ—ñ–≥–æ—Ä", pull_values=[0, 0.1, 0, 0]),
                            use_container_width=True)
            st.markdown("</div>", unsafe_allow_html=True)
    # 3. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–ø–ª–∏–≤—É —Ç–∞ —Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞
    if '–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç' in filtered_survey_df.columns and '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤' in filtered_survey_df.columns and '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤' in filtered_survey_df.columns:
        general_impact_df = pd.DataFrame({
            '–í–ø–ª–∏–≤': ['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π'] * len(filtered_survey_df.loc[(filtered_survey_df['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] == '–¢–∞–∫')].index) +
                    ['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π'] * len(filtered_survey_df.loc[(filtered_survey_df['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] == '–¢–∞–∫')].index),
            '–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç': list(filtered_survey_df.loc[(filtered_survey_df['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] == '–¢–∞–∫')]['–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç']) +
                        list(filtered_survey_df.loc[(filtered_survey_df['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] == '–¢–∞–∫')]['–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç'])
        })
        with col3:

            sunburst_df_general = general_impact_df.groupby(['–í–ø–ª–∏–≤', '–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç']).size().reset_index(name='count')

            fig_general = px.sunburst(
                sunburst_df_general,
                path=['–í–ø–ª–∏–≤', '–†–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç'],
                values='count',
                color='–í–ø–ª–∏–≤', 
                color_discrete_sequence=px.colors.qualitative.T10,
                title="–ó–∞–≥–∞–ª—å–Ω–∏–π –≤–ø–ª–∏–≤"
            )
            fig_general.update_traces(textinfo='label+percent entry',
                                    marker=dict(line=dict(color='black', width=1)))
            fig_general.update_layout(paper_bgcolor='rgba(0,0,0,0)', plot_bgcolor='rgba(0,0,0,0)')
            st.plotly_chart(fig_general)
    else:
        st.error("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É.")

#–î—Ä—É–≥–∏–π —Ä—è–¥ 
    col1, col2, col3 = st.columns([3, 2, 2])
    # –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –≤–ø–ª–∏–≤—É –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –≤–ø–ª–∏–≤—É

    if '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns and '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns:
        filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] = filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].str.strip()
        filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] = filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].str.strip()

        # –ü–µ—Ä–µ–π–º–µ–Ω–æ–≤—É—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –ø–µ—Ä–µ–¥ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è–º
        filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] = filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].replace('–ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ', '–ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó')
        filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] = filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].replace('–ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–¥—ñ–±–Ω–æ—Å—Ç—ñ', '–ö–æ–≥–Ω—ñ—Ç–∏–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó')

        positive_impact_categories = filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        positive_impact_categories.columns = ['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤']
        negative_impact_categories = filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        negative_impact_categories.columns = ['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤']
        grouped_data = pd.merge(positive_impact_categories, negative_impact_categories, on='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', how='outer').fillna(0)
        melted_data = grouped_data.melt(id_vars='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è', value_vars=['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'], var_name='–í–ø–ª–∏–≤', value_name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        with col1:
            fig_interactive = px.bar(melted_data,
                                    y='–ö–∞—Ç–µ–≥–æ—Ä—ñ—è',
                                    x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                    color='–í–ø–ª–∏–≤',
                                    barmode='group',
                                    orientation='h',
                                    title='–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏',
                                    color_discrete_sequence=['#2ca02c', '#d62728'])

            fig_interactive.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                legend=dict(
                    orientation="h",
                    y=0,
                    x=-50
                )
            )
            st.plotly_chart(fig_interactive, use_container_width=True)
    else:
        st.error("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥—Ä—É–ø–æ–≤–∞–Ω–æ—ó —Å—Ç–æ–≤–ø—á–∏–∫–æ–≤–æ—ó")

    #–¢–æ–ø-5 —Ç–∏–ø—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É
    with col2:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        if '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns and '–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns:
            st.markdown(
                """
                <style>
                div[data-baseweb="select"] > div {
                    border: 1px solid #007bff !important;
                    border-radius: 5px !important;
                    padding: 0.1rem !important; 
                }
                .st-eb {
                    display: flex;
                    align-items: center;
                }
                </style>
                """,
                unsafe_allow_html=True,
            )
            col_label_pos, col_select_pos = st.columns([1, 3]) 

            with col_label_pos:
                st.markdown('<div style="display: flex; align-items: center; height: 2.5rem;">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</div>', unsafe_allow_html=True)
            with col_select_pos:
                available_categories = ['–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'] + list(filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].dropna().unique())
                selected_category = st.selectbox("", options=available_categories, label_visibility="collapsed")

            if selected_category == '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó':
                category_data = filtered_merged_df.dropna(subset=['–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
                type_counts = category_data['–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title = '–¢–æ–ø-5 —Ç–∏–ø—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É (–≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)'
            else:
                category_data = filtered_merged_df[filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] == selected_category].dropna(subset=['–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
                type_counts = category_data['–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title = f'–†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'
            type_counts.columns = ['–¢–∏–ø –≤–ø–ª–∏–≤—É', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
            fig_histogram_positive = px.bar(type_counts, x='–¢–∏–ø –≤–ø–ª–∏–≤—É', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                            title=title,
                                            color_discrete_sequence=['#2ca02c'])
            fig_histogram_positive.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                margin=dict(l=20, r=20, t=40, b=100),
                xaxis_title='–¢–∏–ø –≤–ø–ª–∏–≤—É',
                yaxis_title='–ö—ñ–ª—å–∫—ñ—Å—Ç—å'
            )
            st.plotly_chart(fig_histogram_positive, use_container_width=True)
        else:
            st.error("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —Ç–∏–ø—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É.")
        st.markdown('</div>', unsafe_allow_html=True)
    #–¢–æ–ø-5 —Ç–∏–ø—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É
    with col3:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        if '–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns and '–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns:
            st.markdown(
                """
                <style>
                div[data-baseweb="select"] > div {
                    border: 1px solid #dc3545 !important;
                    border-radius: 5px !important;
                    padding: 0.1rem !important; 
                }
                .st-eb {
                    display: flex;
                    align-items: center;
                }
                </style>
                """,
                unsafe_allow_html=True,
            )
            col_label_pos, col_select_pos = st.columns([1, 3])
            with col_label_pos:
                st.markdown('<div style="display: flex; align-items: center; height: 2.5rem;">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</div>', unsafe_allow_html=True)
            with col_select_pos:
                available_categories = ['–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'] + list(filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].dropna().unique())
                selected_category = st.selectbox("", options=available_categories, label_visibility="collapsed")
                
            if selected_category == '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó':
                category_data = filtered_merged_df.dropna(subset=['–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
                type_counts = category_data['–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title = '–¢–æ–ø-5 —Ç–∏–ø—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É (–≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)'
            else:
                category_data = filtered_merged_df[filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] == selected_category].dropna(subset=['–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
                type_counts = category_data['–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title = f'–†–æ–∑–ø–æ–¥—ñ–ª —Ç–∏–ø—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'

            type_counts.columns = ['–¢–∏–ø –≤–ø–ª–∏–≤—É', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']
            fig_histogram_positive = px.bar(type_counts, x='–¢–∏–ø –≤–ø–ª–∏–≤—É', y='–ö—ñ–ª—å–∫—ñ—Å—Ç—å',
                                            title=title,
                                            color_discrete_sequence=['#d62728'])
            fig_histogram_positive.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                margin=dict(l=20, r=20, t=40, b=100),
                xaxis_title='–¢–∏–ø –≤–ø–ª–∏–≤—É',
                yaxis_title='–ö—ñ–ª—å–∫—ñ—Å—Ç—å'
            )
            st.plotly_chart(fig_histogram_positive, use_container_width=True)
        else:
            st.error("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ —Ç–∏–ø—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É.")
        st.markdown('</div>', unsafe_allow_html=True)
    col_label_genre, col_select_genre = st.columns([1, 3])

    with col_label_genre:
        st.markdown('<div style="display: flex; align-items: center; height: 2.5rem;">–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:</div>', unsafe_allow_html=True)
    with col_select_genre:
        available_genre_categories = ['–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'] + list(filtered_merged_df['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].dropna().unique())
        selected_genre_category2 = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", options=available_genre_categories, label_visibility="collapsed", key="genre_category_selector2")

# –¢—Ä–µ—Ç—ñ–π —Ä—è–¥
    col1, col2 = st.columns(2)
    #–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É
    with col1:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        if '–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns:
            positive_genre_data = filtered_merged_df.dropna(subset=['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
            positive_genre_data_filtered = positive_genre_data[positive_genre_data['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] != '–í—Å—ñ']

            if selected_genre_category2 == '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó':
                genre_positive_counts = positive_genre_data_filtered['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title_positive_genre = '–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É (–≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)'
            else:
                genre_positive_category_data = positive_genre_data_filtered[positive_genre_data_filtered['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] == selected_genre_category2]
                genre_positive_counts = genre_positive_category_data['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title_positive_genre = f'–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "{selected_genre_category2}"'

            genre_positive_counts.columns = ['–ñ–∞–Ω—Ä', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']

            fig_positive_genre = px.bar(genre_positive_counts, x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', y='–ñ–∞–Ω—Ä', orientation='h',
                                        title=title_positive_genre, color_discrete_sequence=['#2ca02c'])
            fig_positive_genre.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                margin=dict(l=150, r=20, t=60, b=40),
                yaxis={'categoryorder': 'total ascending'}
            )
            st.plotly_chart(fig_positive_genre, use_container_width=True)
        else:
            st.error("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Å—Ç–æ–≤–ø–µ—Ü—å '–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'.")
        st.markdown('</div>', unsafe_allow_html=True)
    #–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É
    with col2:
        st.markdown('<div class="card">', unsafe_allow_html=True)
        if '–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É' in filtered_merged_df.columns:
            negative_genre_data = filtered_merged_df.dropna(subset=['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
            negative_genre_data_filtered = negative_genre_data[negative_genre_data['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] != '–í—Å—ñ'] 

            if selected_genre_category2 == '–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó':
                genre_negative_counts = negative_genre_data_filtered['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title_negative_genre = '–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É (–≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó)'
            else:
                genre_negative_category_data = negative_genre_data_filtered[negative_genre_data_filtered['–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] == selected_genre_category2]
                genre_negative_counts = genre_negative_category_data['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
                title_negative_genre = f'–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "{selected_genre_category2}"'

            genre_negative_counts.columns = ['–ñ–∞–Ω—Ä', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å']

            fig_negative_genre = px.bar(genre_negative_counts, x='–ö—ñ–ª—å–∫—ñ—Å—Ç—å', y='–ñ–∞–Ω—Ä', orientation='h',
                                            title=title_negative_genre, color_discrete_sequence=['#d62728'])
            fig_negative_genre.update_layout(
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                margin=dict(l=150, r=20, t=60, b=40),
                yaxis={'categoryorder': 'total ascending'}
            )
            st.plotly_chart(fig_negative_genre, use_container_width=True)
        else:
            st.error("–ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ–π —Å—Ç–æ–≤–ø–µ—Ü—å '–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'.")
        st.markdown('</div>', unsafe_allow_html=True)

    filtered_positive_genres = filtered_merged_df[
        (filtered_merged_df['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] != '–í—Å—ñ') & (filtered_merged_df['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] != '0')
    ].copy()
    filtered_negative_genres = filtered_merged_df[
        (filtered_merged_df['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] != '–í—Å—ñ') & (filtered_merged_df['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'] != '0')
    ].copy()
#–ß–µ—Ç–≤–µ—Ä—Ç–∏–π —Ä—è–¥
    col1, col2 = st.columns([2, 1])
    with col1:
        positive_genre_type_counts = filtered_positive_genres.groupby(['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É', '–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É']).size().unstack(fill_value=0)

        fig_heatmap_pos = px.imshow(positive_genre_type_counts,
                                    labels=dict(x="–¢–∏–ø –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É", y="–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É", color="–ö—ñ–ª—å–∫—ñ—Å—Ç—å"),
                                    color_continuous_scale="greens",
                                    text_auto=True,
                                    title="–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∏–ø—É –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –≤—ñ–¥ –∂–∞–Ω—Ä—É" ,
                                    aspect="auto")
        fig_heatmap_pos.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
        st.plotly_chart(fig_heatmap_pos, use_container_width=True)
    # –¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É
    with col2:
        positive_genre_counts = filtered_positive_genres['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤')
        negative_genre_counts = filtered_negative_genres['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].value_counts().nlargest(5).reset_index(name='–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤')
        top_genres_merged = pd.merge(positive_genre_counts, negative_genre_counts, left_on='–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É', right_on='–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É', how='outer').fillna(0)
        top_genres_merged['–ñ–∞–Ω—Ä'] = top_genres_merged['–ñ–∞–Ω—Ä –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'].fillna(top_genres_merged['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É'])
        top_genres_merged = top_genres_merged[['–ñ–∞–Ω—Ä', '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤']]
        top_genres_filtered = top_genres_merged[
            (top_genres_merged['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] > 0) | (top_genres_merged['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] > 0)
        ].copy()
        top_genres_filtered['–ó–∞–≥–∞–ª—å–Ω–∏–π –≤–ø–ª–∏–≤'] = top_genres_filtered['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] + top_genres_filtered['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤']
        top_5_genres_sorted = top_genres_filtered.sort_values(by='–ó–∞–≥–∞–ª—å–Ω–∏–π –≤–ø–ª–∏–≤', ascending=False).head(5)

        fig_stacked_genres = px.bar(top_5_genres_sorted,
                                    x='–ñ–∞–Ω—Ä',
                                    y=['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'],
                                    title="–¢–æ–ø-5 –∂–∞–Ω—Ä—ñ–≤ (—Å—Ç–µ–∫–æ–≤–∞–Ω–æ –∑–∞ –≤–ø–ª–∏–≤–æ–º)",
                                    color_discrete_sequence=['#2ca02c', '#d62728'],
                                    labels={'value': '–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–≥–∞–¥—É–≤–∞–Ω—å', 'variable': '–¢–∏–ø –≤–ø–ª–∏–≤—É'})
        fig_stacked_genres.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)', showlegend=True)
        st.plotly_chart(fig_stacked_genres, use_container_width=True)
    
#–ü'—è—Ç–∏–π —Ä—è–¥ 
    col1, col2 = st.columns([2, 1])
    #–ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å —Ç–∏–ø—É –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –≤—ñ–¥ –∂–∞–Ω—Ä—É 
    with col1:
        negative_genre_type_counts = filtered_negative_genres.groupby(['–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É', '–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É']).size().unstack(fill_value=0)

        fig_heatmap_neg = px.imshow(negative_genre_type_counts,
                                    labels=dict(x="–¢–∏–ø –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É", y="–ñ–∞–Ω—Ä –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É", color="–ö—ñ–ª—å–∫—ñ—Å—Ç—å"),
                                    color_continuous_scale="orrd",
                                    title="–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ —Ç–∏–ø—É –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–ø–ª–∏–≤—É –≤—ñ–¥ –∂–∞–Ω—Ä—É" ,
                                    text_auto=True,
                                    aspect="auto")
        fig_heatmap_neg.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)')
        st.plotly_chart(fig_heatmap_neg, use_container_width=True)
    #–í–ø–ª–∏–≤ —á–∞—Å—É –≥—Ä–∏ 
    with col2:
        time_impact_df = filtered_merged_df[['–ß–∞—Å', '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤']].copy()
        time_mapping = {
            "–º–µ–Ω—à–µ 1 –≥–æ–¥–∏–Ω–∏": 0.5,
            "–±–ª–∏–∑—å–∫–æ 1 –≥–æ–¥–∏–Ω–∏": 1,
            "–±–ª–∏–∑—å–∫–æ 2 –≥–æ–¥–∏–Ω": 2,
            "–±–ª–∏–∑—å–∫–æ 3 –≥–æ–¥–∏–Ω": 3,
            "4 –≥–æ–¥–∏–Ω–∏ —ñ –±—ñ–ª—å—à–µ": 4,
        }
        time_impact_df['–ß–∞—Å_—á–∏—Å–ª–æ'] = time_impact_df['–ß–∞—Å'].map(time_mapping)
        time_impact_df['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] = time_impact_df['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'].apply(lambda x: 1 if x == '–¢–∞–∫' else 0)
        time_impact_df['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] = time_impact_df['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'].apply(lambda x: 1 if x == '–¢–∞–∫' else 0)
        grouped_by_time = time_impact_df.groupby('–ß–∞—Å_—á–∏—Å–ª–æ')[['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤']].sum()
        total_positive_tak = time_impact_df['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'].sum()
        total_negative_tak = time_impact_df['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'].sum()
        normalized_impact = grouped_by_time.copy()
        normalized_impact['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] = normalized_impact['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] / total_positive_tak if total_positive_tak > 0 else 0
        normalized_impact['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] = normalized_impact['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'] / total_negative_tak if total_negative_tak > 0 else 0
        normalized_impact = normalized_impact.reset_index()

        fig_time_impact= px.line(normalized_impact,
                                    x='–ß–∞—Å_—á–∏—Å–ª–æ',
                                    y=['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤', '–ù–µ–≥–∞—Ç–∏–≤–Ω–∏–π –≤–ø–ª–∏–≤'],
                                    labels={'–ß–∞—Å_—á–∏—Å–ª–æ': '–ß–∞—Å –≥—Ä–∏ (–≥–æ–¥–∏–Ω–∏)', 'value': '–ß–∞—Å—Ç–∫–∞ –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ "–¢–∞–∫"', 'variable': '–¢–∏–ø –≤–ø–ª–∏–≤—É'},
                                    color_discrete_sequence=['#2ca02c', '#d62728'],
                                    title="–í–ø–ª–∏–≤ —á–∞—Å—É –≥—Ä–∏" ,
                                    markers=True)
        fig_time_impact.update_layout(plot_bgcolor='rgba(0,0,0,0)', paper_bgcolor='rgba(0,0,0,0)', showlegend=True)
        st.plotly_chart(fig_time_impact, use_container_width=True)
